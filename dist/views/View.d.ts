import { EventDispatcher } from './../event/EventDispatcher';
import { IView } from './IView';
import { Event } from './../event/Event';
import { TouchEvent } from './../event/TouchEvent';
export declare class View extends EventDispatcher implements IView {
    x: number;
    y: number;
    pageX: number;
    pageY: number;
    private _children;
    parent: IView;
    touchEnabled: boolean;
    _scaleX: number;
    _scaleY: number;
    _rotate: number;
    _rotateX: number;
    _rotateY: number;
    _translateX: number;
    _translateY: number;
    _isAttached: boolean;
    constructor();
    path(canvasContext: CanvasRenderingContext2D): void;
    layout(canvasContext: CanvasRenderingContext2D): void;
    onLayout(): void;
    onMeasure(): void;
    draw(canvasContext: CanvasRenderingContext2D): void;
    onDraw(canvasContext: CanvasRenderingContext2D): void;
    dispatchDraw(canvasContext: CanvasRenderingContext2D): void;
    onDispatchTouchEvent(event: TouchEvent): void;
    dispatchTouchEvent(event: TouchEvent): boolean;
    dispatchPropagationEvent(event: Event): void;
    addChild(child: IView): void;
    removeChild(child: IView): void;
    scale(xy: number, y?: number): void;
    rotate(rotate: number, x?: number, y?: number): void;
    translate(xy: number, y?: number): void;
}
